# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ (modulesPath + "/installer/scan/not-detected.nix") ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "ahci" "nvme" "usbhid" ];
  boot.initrd.kernelModules = [ "i915" ];
  boot.kernelModules = [ "kvm-intel" ];

  # /boot efi partition to boot in UEFI mode
  fileSystems."/boot" =
    { device = "/dev/disk/by-id/nvme-Seagate_FireCuda_530_ZP4000GM30013_7VS01VBM-part1";
      fsType = "vfat";
      options = [ "fmask=0022" "dmask=0022" ];
      neededForBoot = true;
    };

  # /nix encrypted btrfs for the remaining space
  boot.initrd.luks.devices."crypt0" = {
    device = "/dev/disk/by-id/nvme-Seagate_FireCuda_530_ZP4000GM30013_7VS01VBM-part2";
    allowDiscards = true;
    bypassWorkqueues = true;
  };
  boot.initrd.luks.devices."crypt1" = {
    device = "/dev/disk/by-id/nvme-CT2000P5PSSD8_213330E4ED05";
    allowDiscards = true;
    bypassWorkqueues = true;
  };
  boot.initrd.luks.devices."crypt2" = {
    device = "/dev/disk/by-id/nvme-Samsung_SSD_980_PRO_2TB_S69ENF0R846614L";
    allowDiscards = true;
    bypassWorkqueues = true;
  };
  fileSystems."/nix" =
    { device = "/dev/mapper/crypt0";
      fsType = "btrfs";
      options = [ "device=/dev/mapper/crypt1" "device=/dev/mapper/crypt2" ];
      neededForBoot = true;
    };

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;

  # intel graphics
  hardware.graphics.extraPackages = with pkgs; [ intel-media-driver intel-compute-runtime ];
}
